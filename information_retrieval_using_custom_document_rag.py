# -*- coding: utf-8 -*-
"""INFORMATION RETRIEVAL USING CUSTOM DOCUMENT RAG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YOjNPcCGF8Izm1zvfkbSXk9LSo4fZ2RN

**INFORMATION RETRIEVAL USING CUSTOM DOCUMENT RAG**
"""

import chromadb

from langchain_openai import OpenAI
from langchain.document_loaders import TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_openai import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.chains import RetrievalQA


# Read the file using the correct encoding
with open("C:/Users/HP/Langchaindemo/Document_retrieval/input_text.txt", "r", encoding="utf-8") as f:
    text = f.read()

# Write the text back to a new file, ensuring it's in UTF-8 encoding
with open("input_text_utf8.txt", "w", encoding="utf-8") as f:
    f.write(text)


loader = TextLoader("C:/Users/HP/Langchaindemo/input_text_utf8.txt")
document = loader.load()

print(document)

#Split the document into smaller chunks that are semantically related
# it will split the text in three recursive calls. First it splits at paragraph level
#Second call at sentence level and third at word level.
# This is at \n\n , \n and space

text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000,
                                               chunk_overlap = 200)
texts = text_splitter.split_documents(document)

#print(texts[0])

#print(texts[1])
# Create the embeddings for the texts. Each text is converted to vector space
# and using the embeddings of two texts which is a floating point number
#we can understand how related they are. OpenAI uses sentence embedding, word embeddings
#based on various factors

embeddings = OpenAIEmbeddings()

store = Chroma.from_documents(texts, embeddings,
                              collection_name='input_text')
llm = OpenAI(temperature = 0)
chain = RetrievalQA.from_chain_type(llm,
                                    retriever = store.as_retriever())

#Start querying
question1 = "What is a natural disaster"
result = chain.invoke({"query": question1})
print(result)


question2 = "List all the natural hazards"
result = chain.invoke({"query": question2})
print(result)

question3 = "What is FEMA?"
result = chain.invoke({"query": question3})
print(result)